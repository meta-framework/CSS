/*-Generic Style Classes.-*/

/*--Generic Layout Classes--*/
	
	/**
	* Block element layout class.
	*
	* A block layout specifies an element with relative position and bottom-up dimension calculation.
	*/
	.block { display: block; position: relative; }
	.box {  position: absolute; top: 0; }
	.table { display: table ; border-collapse: collapse; border-spacing: 0; }
	/**
	* Inline element layout class.
	*
	* The dimension of inline element's cannot be controlled directly. Height and vertical padding may be controlled indirectly however using `line-height` and `font-size` if only text or another inline element is wrapped. Width flows bottom-up from calculation of the content's extent.
	*/
	.inline { display: inline; position: relative; }
	.image { display: inline-block; }
	.clearfloat { clear: both; }
	/**
	* Text element layout class.
	* 
	* In terms of best practice, specify as little as possible on the actual text elements. Text elements are supposed to be positioned inline wrapped inside a block level container (e.g. `.block.layout-text-container`) which specifies most of the contained text element's general attributes (font size, line height, letter spacing, alignment, color, etc.). Inline elements form line boxes which do not apply all dimension properties of the general box model. To specify vertical padding between lines in a multiline text element specify the `line-height`; for horizontal padding use either `margin` or `padding`.
	* Use the `<p>` tag for multiline text elements (not as a container); use the `<span>, <em>` etc. tags for single line or parts of a single line.
	* Examples:
	*	(1) header: <h1 class="block layout-text-container" style="line-height: 1.25em; font-size: 2em; font-family: serif; font-weight: bold;"><span class="text">{header text}</span></h1>
	*	(2) paragraph: <div class="block layout-text-container"><p class="text">{paragraph text}</p></div>
	* @link: https://developer.mozilla.org/de/docs/Web/CSS/line-height
	* @link: http://www.maxdesign.com.au/articles/inline/
	*/
	.text
	{
			display: inline;
			position: relative;
/*
			line-height: inherit;
			font-size: inherit;
			color: inherit;
			text-transform: inherit;
			font-variant: inherit;
*/
			-moz-user-select: -moz-none;
			cursor: default;
	}
	/*@todo: dependant classes for formatting multiline and single line elements*/
	
/*---Block Layout Classes--*/

	.block.-wrapper { margin: 0; padding: 0; }
	.block.-inline { display: inline-block; width: 0; height: 100% }
	.block.-cover { height: 100%; width: 100%; }
	.block.-cover-height { width: auto; height: 100%; }
	.block.-cover-width { width: 100%; height: auto; }
	.block.-align-center { margin: 0 auto; }
	.block.-align-right { margin-left: 0; margin-right: auto; }
	.block.-align-right { margin-left: auto; margin-right: 0; }
	.block.-overflow-horizontal { overflow-x: auto ; overflow: hidden ; }
	.block.-overflow-vertical { overflow-y: auto ; overflow: hidden ; }
	
/*----Block Level Section Container Layout----*/

	/**
	* 
	* @note: To add vertical space between section blocks do not use `margin`; the lower (or upper) boundary of the bounding box will be adjusted by the vertical `margin` value (i.e. the whole bounding box will otherwise have an unwanted bottom, or top, margin).
	*/
	.block.-section { margin-top: 1em; padding-bottom: 2em; }
	
/*----Block Level Text Container Layout----*/
	/**
	* A block element usable as a container for text elements.
	*/
	.block.-text-container {
/*		margin: 0;*/
		text-align: left;
		line-height: 1.25em;
	}
	
	.block.-text-container.-align-left { text-align: left; }
	.block.-text-container.-align-right { text-align: right; }
	.block.-text-container.-align-center { text-align: center; }
	/**
	* Vertically centers the content of a nested `text` element.
	*
	* @note: The nested `text` element may have multiple lines. The `layout-text-container` element may only have one (!) `.text` element in order for the vertical alignment to be applied correctly; multiple elements will be positioned horicontally adjacent (just like table-cells).
	* @link: http://css-tricks.com/vertically-center-multi-lined-text/
	*/
	.block.-text-container.-align-middle { display: table; table-layout: fixed; }
	/**
	* Dependent selector for descendant `text` elements of `block layout-text-container layout-align-center` elements.
	*
	* @link: http://css-tricks.com/vertically-center-multi-lined-text/
	*/
	.block.-text-container.-align-middle .text { display: table-cell; vertical-align: middle; }
	/**
	* @note: This only works if the container (element with class `layout-text-container`) specifies a `line-height` equivalent to its own height.
	* @deprecated
	*/
	.block.-text-container.-align-middle { vertical-align: middle; }
	/*todo: dependent classes for left-to-right text, ... */

/*--Block level column container--*/
	
	/**
	* A column container layout.
	*
	* The column container layout creates a horiziontal list of block level elements whose proportions may be specified. Technically, the rules used to achieve this layout are the same as `.table.layout-blocktable` with a few dependent rule sets. 
	* A few notes on usage:
	* (1) the elements of the column container to be used as columns are declared by adding the `.layout-column` class.
	* (2) each column has to specify its `width` in order for the proportions and layout to be calculated correctly (e.g. in a proportional three column layout: 33.33% on the first and second, 33.34% on the right)
	* (3) to prevent overlap specify the `left` property with the respective aggregate width perecentages of the preceding elements (this happens when a preceding column does not either contain a block element or text, e.g. if it contains only elements with `absolute` or `fixed` positioning)
	* @todo: the following  `:before` pseudo-class trick may be may be sufficient to prevent overlap: `.layout-column:before { content: "."; visibility: hidden }`.
	* @link: https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout
	*/
	.block.-column-container {
			display: table;
			table-layout: fixed;
			width: 100%;
	}
	.block.-column-container .layout-column:first-of-type { float: left; }
	.block.-column-container .layout-column:last-of-type { float: right; }
	/**
	* @note: copy of `.block.layout-inline` mixed in with `.block.layout-wrapper`; width has to be specified using percentage or explicit values.
	*/
	.block.-column { display: inline-block; width: 0; height: 100%; margin: 0; padding: 0; }

	/*Boxes (layout components with arbitrary position and top-down dimensional calculation)*/
	
	/**
	* @link: http://www.vanseodesign.com/css/vertical-centering/
	*/
	.box.-align-center {
		width: 50%;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
		height: 50%;
	}
		
	/*Images.*/

	/**
	* @todo: deprecate, remove and make into `.block.background-cover` rule.
	*/
	.image.background-cover {
			background-size: cover;
			background-position: center center;
	}

	.image.-inline {
		display: inline;
		height: 1em;
		width: auto;
	}

	.image.-cover {
		height: 100%;
		width: 100%;
	}

	.image.-cover-width {
		height: auto !important;
		width: 100% !important;
		margin-top: auto !important;
		margin-bottom: auto !important;
	}

	.image.-cover-height {
		height: 100% !important;
		width: auto !important;
		margin-left: auto !important;
		margin-right: auto !important;
	}
	
	.image.-align-center {
		display: block;
		margin: 0 auto;
	}
	
	/*Tables*/
	
	.table.-blocktable {
			table-layout: fixed;
			width: 100%;
	}

	.table tr {
			display: table-row;
	}
	.table > thead th,
	.table > tbody td {
			display: table-cell;
	}
		
	/*Text.*/

	em.-italic { font-style: italic; }
	em.-bold { font-weight: bold; }
	em.-underline { text-decoration: underline; }
	em.-overline { text-decoration: overline; }
	em.-strike { text-decoration: line-through; }
	em.-bigger { font-size: 1.25em; }
	em.-smaller { font-size: 0.75em; }

	.text.-bold { font-weight: bold; }
	.text.-italic { font-style: italic; }
	.text.-uppercase { text-transform: uppercase; }
	.text.-family-sfdefault { font-family: Tahoma, Verdana, Helvetica, Arial, sans-serif; }
	.text.-family-rmdefault { font-family: Georgia, Palatino, Garamond, Times, serif; }
	.text.-family-msdefault { font-family: Monaco, 'Courier New', Courier, monospace; }
	.text.-color-default { color: #191919; }

	/**
	* Half the inherited font size.
	*
	* With 16px baseline font size this is equivalent to 8px font size.
	*/
	.text.-size-tiny { font-size: 0.5em; }
	/**
	* 3/4 of the inherited font size.
	*
	* With 16px baseline font size this is equivalent to 12px font size.
	*/
	.text.-size-small { font-size: 0.75em; }
	/**
	* Exactly the inherited font size.
	*/
	.text.-size-normal { font-size: 1em; }
	/**
	* A fourth of the inherited font size larger.
	*
	* With 16px baseline font size this is equivalent to 20px font size.
	*/
	.text.-size-medium { font-size: 1.25em; }
	/**
	* Half the inherited font size larger.
	*
	* With 16px baseline font size this is equivalent to 24px font size.
	*/
	.text.-size-large { font-size: 1.5em; }
	/**
	* Double the inherited font size.
	* 
	* With 16px baseline font size this is equivalent to 32px font size.
	*/
	.text.-size-huge { font-size: 2em; }

	.text.-underline { text-decoration: underline; }

	/*Decorations*/

	/**
	* @todo polyfill
	*/
	.shadow { }
	.shadow.-box { box-shadow: 0.2em 0.2em 0.5em #191919; }
	.shadow.-text { text-shadow: 0.1em 0.1em 0.2em #191919; }
	
	/**
	* Specify a the `*-background-image` properties with a `url(<url>)` value in order to customize a background for a specific image.
	*/
	.background {
			-moz-background-image: none;
			-webkit-background-image: none;
			-o-background-image: none;
			background-image: none;			
			-moz-background-repeat: no-repeat;
			-webkit-background-repeat: no-repeat;
			-o-background-repeat: no-repeat;
			background-repeat: no-repeat;
			-moz-background-position: center center;
			-webkit-background-position: center center;
			-o-background-position: center center;
			background-position: center center;
			-moz-background-attachment: scroll;
			-webkit-background-attachment: scroll;
			-o-background-attachment: scroll;
			background-attachment: scroll;
			-moz-background-size: contain;
			-webkit-background-size: contain;
			-o-background-size: contain;
			background-size: contain;
			background-size: auto contain;
	}
	.background.-contain {
			-moz-background-size: contain;
			-webkit-background-size: contain;
			-o-background-size: contain;
			background-size: contain;
			background-size: auto contain;
	}
	.background.-cover {
			-moz-background-size: cover;
			-webkit-background-size: cover;
			-o-background-size: cover;
			background-size: cover;
			background-size: auto cover;
	}
	.background.-fixed {
			background-attachment: fixed;
	}
	.background.-scroll {
			background-attachment: scroll;
	}

